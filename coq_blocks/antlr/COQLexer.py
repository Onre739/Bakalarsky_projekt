# Generated from COQ.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,120,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,
        10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,4,13,83,8,13,11,13,12,13,84,
        1,13,5,13,88,8,13,10,13,12,13,91,9,13,1,13,3,13,94,8,13,1,13,5,13,
        97,8,13,10,13,12,13,100,9,13,1,13,5,13,103,8,13,10,13,12,13,106,
        9,13,1,13,5,13,109,8,13,10,13,12,13,112,9,13,1,14,4,14,115,8,14,
        11,14,12,14,116,1,14,1,14,0,0,15,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,1,0,5,2,0,65,90,97,122,
        1,0,48,57,1,0,95,95,1,0,39,39,3,0,9,10,13,13,32,32,126,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,3,
        42,1,0,0,0,5,44,1,0,0,0,7,49,1,0,0,0,9,51,1,0,0,0,11,61,1,0,0,0,
        13,65,1,0,0,0,15,68,1,0,0,0,17,70,1,0,0,0,19,72,1,0,0,0,21,74,1,
        0,0,0,23,76,1,0,0,0,25,78,1,0,0,0,27,82,1,0,0,0,29,114,1,0,0,0,31,
        32,5,72,0,0,32,33,5,121,0,0,33,34,5,112,0,0,34,35,5,111,0,0,35,36,
        5,116,0,0,36,37,5,104,0,0,37,38,5,101,0,0,38,39,5,115,0,0,39,40,
        5,105,0,0,40,41,5,115,0,0,41,2,1,0,0,0,42,43,5,58,0,0,43,4,1,0,0,
        0,44,45,5,84,0,0,45,46,5,121,0,0,46,47,5,112,0,0,47,48,5,101,0,0,
        48,6,1,0,0,0,49,50,5,46,0,0,50,8,1,0,0,0,51,52,5,73,0,0,52,53,5,
        110,0,0,53,54,5,100,0,0,54,55,5,117,0,0,55,56,5,99,0,0,56,57,5,116,
        0,0,57,58,5,105,0,0,58,59,5,118,0,0,59,60,5,101,0,0,60,10,1,0,0,
        0,61,62,5,83,0,0,62,63,5,101,0,0,63,64,5,116,0,0,64,12,1,0,0,0,65,
        66,5,58,0,0,66,67,5,61,0,0,67,14,1,0,0,0,68,69,5,40,0,0,69,16,1,
        0,0,0,70,71,5,41,0,0,71,18,1,0,0,0,72,73,5,123,0,0,73,20,1,0,0,0,
        74,75,5,125,0,0,75,22,1,0,0,0,76,77,5,124,0,0,77,24,1,0,0,0,78,79,
        5,45,0,0,79,80,5,62,0,0,80,26,1,0,0,0,81,83,7,0,0,0,82,81,1,0,0,
        0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,89,1,0,0,0,86,88,
        7,1,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,
        90,93,1,0,0,0,91,89,1,0,0,0,92,94,7,2,0,0,93,92,1,0,0,0,93,94,1,
        0,0,0,94,98,1,0,0,0,95,97,7,0,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,
        96,1,0,0,0,98,99,1,0,0,0,99,104,1,0,0,0,100,98,1,0,0,0,101,103,7,
        1,0,0,102,101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,
        0,0,0,105,110,1,0,0,0,106,104,1,0,0,0,107,109,7,3,0,0,108,107,1,
        0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,28,1,0,
        0,0,112,110,1,0,0,0,113,115,7,4,0,0,114,113,1,0,0,0,115,116,1,0,
        0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,0,118,119,6,14,
        0,0,119,30,1,0,0,0,8,0,84,89,93,98,104,110,116,1,6,0,0
    ]

class COQLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    NAME = 14
    WS = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Hypothesis'", "':'", "'Type'", "'.'", "'Inductive'", "'Set'", 
            "':='", "'('", "')'", "'{'", "'}'", "'|'", "'->'" ]

    symbolicNames = [ "<INVALID>",
            "NAME", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "NAME", 
                  "WS" ]

    grammarFileName = "COQ.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


